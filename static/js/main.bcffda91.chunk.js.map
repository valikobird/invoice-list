{"version":3,"sources":["components/TableHeader/index.jsx","components/TableDataCell/index.jsx","components/TableDataRow/index.jsx","components/Table/index.jsx","components/Paginator/index.jsx","components/FilterContainer/FilterSelect/index.jsx","components/FilterContainer/FilterText/index.jsx","components/FilterContainer/FilterDate/index.jsx","components/FilterContainer/FilterNumber/NumberRangeSelector/index.jsx","components/FilterContainer/FilterNumber/index.jsx","components/FilterContainer/index.jsx","components/FilterContainer/utils.js","components/MainContainer/index.jsx","index.js"],"names":["TableHeader","columns","Object","keys","map","columnKey","scope","label","MD5","join","toString","TableDataCell","value","TableDataRow","invoice","keySalt","className","Table","invoices","values","Paginator","currentPage","quantity","updatePageNumber","useState","inputValue","setInputValue","useEffect","applyNewValue","newValue","sanitizeInputValue","replace","handlePageChange","pageNumber","type","onClick","hidden","name","onInput","event","target","onKeyPress","charCode","size","FilterSelect","columnId","options","updateFilterValue","htmlFor","id","onChange","find","option","item","FilterText","FilterDate","startDate","undefined","endDate","range","setRange","showSelector","setShowSelector","getDateRangeText","useCallback","start","getDate","getMonth","getFullYear","end","text","toggleSelector","newRange","ranges","key","NumberRangeSelector","minValue","maxValue","updateRange","from","to","assign","min","autoFocus","FilterNumber","getNumberRangeText","FilterContainer","applyFilters","filters","setFilters","newFilters","columnParams","filterType","toLowerCase","getFilter","MainContainer","pageSize","setPageSize","setInvoices","setPageNumber","pagesQuantity","setPagesQuantity","config","defaults","filteredDocuments","documents","filter","document","reduce","acc","docValue","includes","dateRange","parts","split","docDate","Date","getTime","numberRange","calculatePagesQuantity","length","documentsPage","Math","slice","total","ceil","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bcffda91.chunk.js","sourcesContent":["import MD5 from 'crypto-js/md5';\n\nfunction TableHeader({ columns }) {\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map(columnKey => {\n                    return (\n                        <th scope=\"col\"\n                            key={MD5([columnKey, columns[columnKey].label].join('|')).toString()}\n                        >{columns[columnKey].label}</th>\n                    );\n                })}\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;","const TableDataCell = ({ value }) => <td>{value}</td>;\n\nexport default TableDataCell;","import MD5 from 'crypto-js/md5';\nimport TableDataCell from '../TableDataCell';\nimport { columns } from '../../config.json';\n\nconst TableDataRow = function ({ invoice, keySalt }) {\n    return (\n        <tr className=\"table-row\">\n            {Object.keys(columns).map(columnKey => {\n                const value = invoice[columnKey];\n                return <TableDataCell\n                    value={value}\n                    key={MD5([keySalt, value, columnKey].join('|')).toString()}\n                />;\n            })}\n        </tr>\n    );\n}\n\nexport default TableDataRow;","import MD5 from 'crypto-js/md5';\n\nimport TableHeader from '../TableHeader';\nimport TableDataRow from '../TableDataRow';\nimport { columns } from '../../config.json';\n\nfunction Table({ invoices }) {\n    return (\n        <div className=\"table-responsive\">\n            <table className=\"table table-hover\">\n                <TableHeader\n                    columns={columns}\n                    key={MD5(Object.keys(columns).join('|')).toString()}\n                />\n                <tbody>\n                    {invoices.map(invoice => {\n                        return <TableDataRow\n                            invoice={invoice}\n                            key={MD5(Object.values(invoice).join('|')).toString()}\n                            keySalt={MD5(Object.values(invoice).join('|')).toString()}\n                        />;\n                    })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Table;","import { useEffect, useState } from \"react\";\n\nfunction Paginator({ currentPage, quantity, updatePageNumber }) {\n    const [inputValue, setInputValue] = useState(0);\n\n    useEffect(() => {\n        setInputValue(currentPage);\n    }, [currentPage]);\n\n    const handleInput = event => {\n        applyNewValue(event.target.value);\n    };\n\n    const handleKeyPress = event => {\n        if (event.charCode === 13 && inputValue) {\n            updatePageNumber(inputValue);\n        }\n    };\n\n    const applyNewValue = newValue => {\n        newValue === ''\n            ? setInputValue(newValue)\n            : setInputValue(sanitizeInputValue(newValue));\n    };\n\n    const sanitizeInputValue = value => {\n        if (typeof value === 'string') {\n            value = value.replace(/\\D/, '');\n        }\n        if (value < 1) {\n            value = 1;\n        } else if (value > quantity) {\n            value = quantity;\n        }\n        return value;\n    }\n\n    const handlePrev = () => {\n        const prevPage = inputValue - 1;\n        handlePageChange(prevPage);\n    };\n\n    const handleNext = () => {\n        const nextPage = inputValue + 1;\n        handlePageChange(nextPage);\n    };\n\n    const handlePageChange = pageNumber => {\n        applyNewValue(pageNumber);\n        updatePageNumber(sanitizeInputValue(pageNumber));\n    };\n\n    return (\n        <div className=\"text-center\">\n            <button\n                type=\"button\"\n                className=\"prevPage btn btn-sm btn-outline-secondary mr-3\"\n                onClick={handlePrev}\n                hidden={currentPage <= 1}\n            >Prev</button>\n            <input\n                type=\"text\"\n                name=\"currentPage\"\n                value={inputValue}\n                onInput={handleInput}\n                onKeyPress={handleKeyPress}\n                className=\"mr-2 px-2 text-center\"\n                size=\"2\"\n            />\n            <span className=\"pagesQuantity\">{`out of ${quantity}`}</span>\n            <button\n                className=\"nextPage btn btn-sm btn-outline-secondary ml-3\"\n                onClick={handleNext}\n                hidden={currentPage === quantity}\n            >Next</button>\n        </div>\n    );\n};\n\nexport default Paginator;","import MD5 from 'crypto-js/md5';\nimport { columns } from '../../../config.json';\n\nfunction FilterSelect({ columnId, options, updateFilterValue }) {\n    const handleChange = event => {\n        const value = event.target.value\n            ? options.find(option => option.value === event.target.value).label\n            : '';\n\n        updateFilterValue({\n            columnId,\n            value,\n        });\n    };\n\n    return (\n        <div className=\"d-flex flex-column my-2\">\n            <label htmlFor={columnId}>{columns[columnId].label}</label>\n            <select name={columnId} id={columnId} onChange={handleChange}>\n                <option value=\"\"></option>\n                {options.map(item => {\n                    return (\n                        <option \n                            value={item.value}\n                            key={MD5(`${columnId}|${item.value}`)}\n                        >{item.label}</option>\n                    );\n                })}\n            </select>\n        </div>\n    );\n}\n\nexport default FilterSelect;","import { useState } from 'react';\nimport { columns } from '../../../config.json';\n\nfunction FilterText({ columnId, updateFilterValue }) {\n    const [inputValue, setInputValue] = useState('');\n\n    const updateValue = event => {\n        setInputValue(event.target.value);\n        updateFilterValue({\n            columnId,\n            value: event.target.value\n        });\n    };\n\n    return (\n        <div className=\"d-flex flex-column my-2\">\n            <label htmlFor={columnId}>{columns[columnId].label}</label>\n            <input\n                type=\"text\"\n                name={columnId}\n                value={inputValue}\n                onChange={updateValue}\n                size=\"15\"\n                className=\"px-2\"\n            />\n        </div>\n    );\n}\n\nexport default FilterText;","import { useCallback, useState } from 'react';\nimport { DateRangePicker } from 'react-date-range';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nfunction FilterDate({ columnId, updateFilterValue }) {\n    const [range, setRange] = useState({\n        startDate: undefined,\n        endDate: undefined,\n    });\n    const [showSelector, setShowSelector] = useState(false);\n\n    const handleSelection = ranges => {\n        toggleSelector();\n        const newRange = {\n            startDate: ranges[columnId].startDate,\n            endDate: ranges[columnId].endDate,\n        };\n        setRange(newRange);\n        updateFilterValue({\n            columnId,\n            value: newRange,\n        });\n    };\n\n    const getDateRangeText = useCallback(() => {\n        const start = range.startDate\n            && `${range.startDate.getDate()}/${range.startDate.getMonth() + 1}/${range.startDate.getFullYear()}`;\n        const end = range.endDate\n            && `${range.endDate.getDate()}/${range.endDate.getMonth() + 1}/${range.endDate.getFullYear()}`;\n        const text = !range.startDate && !range.endDate\n            ? 'is not selected'\n            : `from ${start} to ${end}`;\n\n        return `Date range ${text}`;\n    }, [range]);\n\n    const toggleSelector = () => {\n        setShowSelector(!showSelector);\n    };\n\n    const handleClear = () => {\n        const newRange = {\n            startDate: undefined,\n            endDate: undefined,\n        };\n        setRange(newRange);\n        updateFilterValue({\n            columnId,\n            value: newRange,\n        });\n    };\n\n    return (\n        <div className=\"pl-0 my-2 w-50 d-flex flex-row justify-content-start align-items-baseline\">\n            <span>{getDateRangeText()}</span>\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-primary btn-sm ml-2\"\n                onClick={toggleSelector}\n            >{showSelector ? 'Hide' : 'Select'}</button>\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-secondary btn-sm ml-2\"\n                onClick={handleClear}\n            >Clear</button>\n            {showSelector &&\n                <div className=\"position-absolute mt-4 pt-3\">\n                    <DateRangePicker\n                        ranges={[{\n                            startDate: range.startDate,\n                            endDate: range.endDate,\n                            key: columnId,\n                        }]}\n                        onChange={handleSelection}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default FilterDate;","import { useState } from \"react\";\n\nfunction NumberRangeSelector({ minValue, maxValue, updateRange }) {\n    const [range, setRange] = useState({\n        from: minValue || '',\n        to: maxValue || ''\n    });\n\n    const handleChangeValueFrom = event => {\n        const newRange = Object.assign({}, range, { from: event.target.value });\n        setRange(newRange);\n        updateRange(newRange);\n    };\n\n    const handleChangeValueTo = event => {\n        const newRange = Object.assign({}, range, { to: event.target.value });\n        setRange(newRange);\n        updateRange(newRange);\n    };\n\n    return (\n        <div className=\"my-2\">\n            <label htmlFor=\"from\">From</label>\n            <input\n                type=\"number\"\n                value={range.from}\n                onChange={handleChangeValueFrom}\n                className=\"mx-2 pl-2\"\n                size=\"10\"\n                min=\"0\"\n                autoFocus\n            />\n            <label htmlFor=\"to\">to</label>\n            <input\n                type=\"number\"\n                value={range.to}\n                onChange={handleChangeValueTo}\n                className=\"mx-2 pl-2\"\n                size=\"10\"\n                min=\"0\"\n            />\n        </div>\n    );\n};\n\nexport default NumberRangeSelector;","import { useCallback, useState } from \"react\";\nimport NumberRangeSelector from \"./NumberRangeSelector\";\n\nfunction FilterNumber({ columnId, updateFilterValue }) {\n    const [showSelector, setShowSelector] = useState(false);\n    const [range, setRange] = useState({\n        from: undefined,\n        to: undefined,\n    });\n\n    const getNumberRangeText = useCallback(() => {\n        let text;\n        if (!range.from && !range.to) {\n            text = 'is not selected';\n        } else if (range.from && !range.to) {\n            text = `from ${range.from}`;\n        } else if (!range.from && range.to) {\n            text = `up to ${range.to}`;\n        } else {\n            text = `from ${range.from} to ${range.to}`;\n        }\n\n        return `Amount range ${text}`;\n    }, [range]);\n\n    const toggleSelector = () => {\n        setShowSelector(!showSelector);\n    };\n\n    const updateRange = newRange => {\n        setRange(newRange);\n        updateFilterValue({\n            columnId,\n            value: newRange,\n        });\n    };\n\n    const handleClear = () => {\n        setShowSelector(false);\n        const newRange = {\n            from: undefined,\n            to: undefined,\n        };\n        setRange(newRange);\n        updateFilterValue({\n            columnId,\n            value: newRange,\n        });\n    };\n\n    return (\n        <div className=\"my-2\">\n            <span>{getNumberRangeText()}</span>\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-primary btn-sm ml-2\"\n                onClick={toggleSelector}\n            >{showSelector ? 'Hide' : 'Select'}</button>\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-secondary btn-sm ml-2\"\n                onClick={handleClear}\n            >Clear</button>\n            {showSelector &&\n                <NumberRangeSelector\n                    minValue={range.from}\n                    maxValue={range.to}\n                    updateRange={updateRange}\n                />\n            }\n        </div>\n    );\n}\n\nexport default FilterNumber;","import FilterSelect from \"./FilterSelect\";\nimport { columns } from '../../config.json';\nimport { prepareFilterOptions } from \"./utils\";\nimport MD5 from \"crypto-js/md5\";\nimport FilterText from \"./FilterText\";\nimport FilterDate from \"./FilterDate\";\nimport FilterNumber from \"./FilterNumber\";\nimport { useState } from \"react\";\n\nfunction FilterContainer({ applyFilters }) {\n    const [filters, setFilters] = useState({});\n\n    const getFilter = columnId => {\n        const columnParams = columns[columnId];\n        switch (columnParams.filterType) {\n            case 'select':\n                const options = prepareFilterOptions(columnParams.options);\n                return <FilterSelect\n                    columnId={columnId}\n                    options={options}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />\n            case 'text':\n                return <FilterText\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            case 'date':\n                return <FilterDate\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            case 'number':\n                return <FilterNumber\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            default:\n                return <></>;\n        }\n    };\n\n    const updateFilterValue = newValue => {\n        const newFilters = { ...filters };\n        newFilters[newValue.columnId] = newValue.value;\n        setFilters(newFilters);\n    };\n\n    const handleApply = () => {\n        applyFilters(filters);\n    };\n\n    return (\n        <div className=\"mb-4 d-flex flex-row justify-content-between\">\n            <div className=\"pl-0 container d-flex flex-row justify-content-between flex-wrap\">\n                {Object.keys(columns).map(columnId => getFilter(columnId))}\n            </div>\n            <div className=\"d-flex align-self-stretch controls\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-outline-success\"\n                    onClick={handleApply}\n                >Apply</button>\n            </div>\n        </div>\n    );\n}\n\nexport default FilterContainer;","const prepareFilterOptions = items => {\n    return items.map(item => {\n        return {\n            'value': item.replace(' ', '').toLowerCase(),\n            'label': item\n        };\n    });\n};\n\nexport {\n    prepareFilterOptions\n};","import { useEffect, useState } from 'react';\nimport Table from '../Table';\nimport Paginator from '../Paginator';\nimport config from '../../config.json';\nimport { documents } from '../../data/documents.json';\nimport FilterContainer from '../FilterContainer';\n\nfunction MainContainer() {\n    const [pageSize, setPageSize] = useState(0);\n    const [invoices, setInvoices] = useState([]);\n    const [pageNumber, setPageNumber] = useState(0);\n    const [pagesQuantity, setPagesQuantity] = useState(0);\n    const [filters, setFilters] = useState({});\n\n    useEffect(() => {\n        setPageSize(config.defaults.pageSize);\n    }, []);\n\n    useEffect(() => {\n        setPageNumber(1);\n    }, [filters]);\n\n    useEffect(() => {\n        const filteredDocuments = documents.filter(document => {\n            return Object.keys(filters).reduce((acc, columnId) => {\n                if (!filters[columnId]) {\n                    return acc;\n                }\n\n                const docValue = document[columnId];\n                const columnConfig = config.columns[columnId];\n                switch (columnConfig.filterType) {\n                    case \"select\":\n                        return acc && (docValue === filters[columnId])\n                    case \"text\":\n                        return acc && docValue.includes(filters[columnId]);\n                    case \"date\":\n                        const dateRange = filters[columnId];\n                        const parts = docValue.split('-');\n                        const docDate = (new Date(parts[0], parts[1] - 1, parts[2])).getTime();\n                        return (!dateRange.startDate && !dateRange.endDate)\n                            ? acc\n                            : acc\n                                && docDate >= dateRange.startDate.getTime()\n                                && docDate <= dateRange.endDate.getTime();\n                    case \"number\":\n                        const numberRange = filters[columnId];\n                        if (!numberRange.from && !numberRange.to) {\n                            return acc;\n                        } else if (numberRange.from && !numberRange.to) {\n                            return acc && (docValue >= numberRange.from);\n                        } else if (!numberRange.from && numberRange.to) {\n                            return acc && (docValue <= numberRange.to);\n                        } else {\n                            return acc\n                                && docValue >= numberRange.from\n                                && docValue <= numberRange.to;\n                        }\n                    default:\n                        return acc;\n                }\n            }, true);\n        });\n\n        const pagesQuantity = calculatePagesQuantity(pageSize, filteredDocuments.length);\n        setPagesQuantity(pagesQuantity);\n        const newPageNumber = pageNumber > pagesQuantity\n            ? setPageNumber(Math.min(pagesQuantity, 1))\n            : pageNumber;\n\n        const documentsPage = newPageNumber\n            ? filteredDocuments.slice((pageNumber - 1) * pageSize, pageNumber * pageSize)\n            : [];\n\n        setInvoices(documentsPage);\n    }, [pageSize, pageNumber, filters]);\n\n    const calculatePagesQuantity = (size, total) => {\n        return Math.ceil(total / size);\n    };\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center mt-5 mb-4\">Invoices</h1>\n            <FilterContainer applyFilters={setFilters} />\n            <Table invoices={invoices} />\n            <Paginator\n                currentPage={pageNumber}\n                quantity={pagesQuantity}\n                updatePageNumber={setPageNumber}\n            />\n        </div>\n    );\n}\n\nexport default MainContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainContainer from './components/MainContainer';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainContainer />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}