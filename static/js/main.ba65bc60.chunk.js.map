{"version":3,"sources":["components/TableHeader/index.jsx","components/TableDataCell/index.jsx","components/TableDataRow/index.jsx","components/Table/index.jsx","components/Paginator/index.jsx","components/FilterContainer/FilterSelect/index.jsx","components/FilterContainer/FilterText/index.jsx","components/FilterContainer/FilterDate/index.jsx","components/FilterContainer/FilterNumber/NumberRangeSelector/index.jsx","components/FilterContainer/FilterNumber/index.jsx","components/FilterContainer/index.jsx","components/FilterContainer/utils.js","components/MainContainer/index.jsx","index.js"],"names":["TableHeader","columns","className","Object","keys","map","columnKey","label","MD5","join","toString","TableDataCell","value","TableDataRow","invoice","keySalt","Table","invoices","values","Paginator","currentPage","quantity","updatePageNumber","useState","inputValue","setInputValue","applyNewValue","newValue","sanitizeInputValue","replace","handlePageChange","pageNumber","onClick","hidden","type","name","onInput","event","target","onKeyPress","charCode","FilterSelect","columnId","options","updateFilterValue","htmlFor","id","item","FilterText","useEffect","onChange","FilterDate","startDate","setStartDate","endDate","setEndDate","showSelector","setShowSelector","getDateRangeText","useCallback","start","getDate","getMonth","getFullYear","end","text","toggleSelector","ranges","key","NumberRangeSelector","minValue","maxValue","updateRange","valueFrom","setValueFrom","valueTo","setValueTo","FilterNumber","minAmount","setMinAmount","maxAmount","setMaxAmount","getNumberRangeText","range","FilterContainer","columnParams","filterType","toLowerCase","getFilter","MainContainer","pageSize","setPageSize","setInvoices","setPageNumber","pagesQuantity","setPagesQuantity","config","defaults","fetchedInvoices","getInvoices","documents","calculatePagesQuantity","documentsList","size","currentPageNumber","slice","meta","total","Math","ceil","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba65bc60.chunk.js","sourcesContent":["import MD5 from 'crypto-js/md5';\n\nfunction TableHeader({ columns }) {\n    return (\n        <thead>\n            <tr className=\"table-header\">\n                {Object.keys(columns).map(columnKey => {\n                    return (\n                        <th className=\"table-header-cell\"\n                            key={MD5([columnKey, columns[columnKey].label].join('|')).toString()}\n                        >{columns[columnKey].label}</th>\n                    );\n                })}\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;","const TableDataCell = ({ value }) => <td className=\"table-cell\">{value}</td>;\n\nexport default TableDataCell;","import MD5 from 'crypto-js/md5';\nimport TableDataCell from '../TableDataCell';\nimport { columns } from '../../config.json';\n\nconst TableDataRow = function ({ invoice, keySalt }) {\n    return (\n        <tr className=\"table-row\">\n            {Object.keys(columns).map(columnKey => {\n                const value = invoice[columnKey];\n                return <TableDataCell\n                    value={value}\n                    key={MD5([keySalt, value, columnKey].join('|')).toString()}\n                />;\n            })}\n        </tr>\n    );\n}\n\nexport default TableDataRow;","import MD5 from 'crypto-js/md5';\n\nimport TableHeader from '../TableHeader';\nimport TableDataRow from '../TableDataRow';\nimport { columns } from '../../config.json';\n\nfunction Table({ invoices }) {\n    return (\n        <table>\n            <TableHeader\n                columns={columns}\n                key={MD5(Object.keys(columns).join('|')).toString()}\n            />\n            <tbody>\n                {invoices.map(invoice => {\n                    return <TableDataRow\n                        invoice={invoice}\n                        key={MD5(Object.values(invoice).join('|')).toString()}\n                        keySalt={MD5(Object.values(invoice).join('|')).toString()}\n                    />;\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;","import { useState } from \"react\";\n\nfunction Paginator({ currentPage, quantity, updatePageNumber }) {\n    const [inputValue, setInputValue] = useState(currentPage);\n\n    const handleInput = event => {\n        applyNewValue(event.target.value);\n    };\n\n    const handleKeyPress = event => {\n        if (event.charCode === 13 && inputValue) {\n            updatePageNumber(inputValue);\n        }\n    };\n\n    const applyNewValue = newValue => {\n        newValue === ''\n            ? setInputValue(newValue)\n            : setInputValue(sanitizeInputValue(newValue));\n    };\n\n    const sanitizeInputValue = value => {\n        if (typeof value === 'string') {\n            value = value.replace(/\\D/, '');\n        }\n        if (value < 1) {\n            value = 1;\n        } else if (value > quantity) {\n            value = quantity;\n        }\n        return value;\n    }\n\n    const handlePrev = () => {\n        const prevPage = inputValue - 1;\n        handlePageChange(prevPage);\n    };\n\n    const handleNext = () => {\n        const nextPage = inputValue + 1;\n        handlePageChange(nextPage);\n    };\n\n    const handlePageChange = pageNumber => {\n        applyNewValue(pageNumber);\n        updatePageNumber(sanitizeInputValue(pageNumber));\n    };\n\n    return (\n        <div>\n            <button\n                className=\"prevPage\" \n                onClick={handlePrev} \n                hidden={currentPage === 1}\n            >Prev</button>\n            <input\n                type=\"text\"\n                name=\"currentPage\"\n                value={inputValue}\n                onInput={handleInput}\n                onKeyPress={handleKeyPress}\n            />\n            <span className=\"pagesQuantity\">{`out of ${quantity}`}</span>\n            <button\n                className=\"nextPage\" \n                onClick={handleNext}\n                hidden={currentPage === quantity}\n            >Next</button>\n        </div>\n    );\n};\n\nexport default Paginator;","import MD5 from 'crypto-js/md5';\nimport { columns } from '../../../config.json';\n\nfunction FilterSelect({ columnId, options, updateFilterValue }) {\n    return (\n        <div className=\"filter filterSelect\">\n            <label htmlFor={columnId}>{columns[columnId].label}</label>\n            <select name={columnId} id={columnId}>\n                <option value=\"\"></option>\n                {options.map(item => {\n                    return (\n                        <option \n                            value={item.value}\n                            key={MD5(`${columnId}|${item.value}`)}\n                        >{item.label}</option>\n                    );\n                })}\n            </select>\n        </div>\n    );\n}\n\nexport default FilterSelect;","import { useEffect, useState } from 'react';\nimport { columns } from '../../../config.json';\n\nfunction FilterText({ columnId, updateFilterValue }) {\n    const [inputValue, setInputValue] = useState('');\n\n    useEffect(() => {\n        updateFilterValue(inputValue);\n    }, [inputValue, updateFilterValue]);\n\n    return (\n        <div className=\"filter filterText\">\n            <label htmlFor={columnId}>{columns[columnId].label}</label>\n            <input\n                type=\"text\"\n                name={columnId}\n                value={inputValue}\n                onChange={setInputValue}\n            />\n        </div>\n    );\n}\n\nexport default FilterText;","import { useCallback, useState } from 'react';\nimport { DateRangePicker } from 'react-date-range';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nfunction FilterDate({ columnId, updateFilterValue }) {\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [showSelector, setShowSelector] = useState(false);\n\n    const handleSelection = ranges => {\n        setStartDate(ranges[columnId].startDate);\n        setEndDate(ranges[columnId].endDate);\n        toggleSelector();\n    };\n\n    const getDateRangeText = useCallback(() => {\n        const start = startDate && `${startDate.getDate()}/${startDate.getMonth() + 1}/${startDate.getFullYear()}`;\n        const end = endDate && `${endDate.getDate()}/${endDate.getMonth() + 1}/${endDate.getFullYear()}`;\n        const text = !startDate && !endDate\n            ? 'is not selected'\n            : `from ${start} to ${end}`;\n\n        return `Date range ${text} (clickable)`;\n    }, [startDate, endDate]);\n\n    const toggleSelector = () => {\n        setShowSelector(!showSelector);\n    };\n\n    return (\n        <div className=\"filter filterDate\">\n            <span className=\"dateRange\" onClick={toggleSelector}>{getDateRangeText()}</span>\n            {showSelector &&\n                <DateRangePicker\n                    ranges={[{\n                        startDate,\n                        endDate,\n                        key: columnId,\n                    }]}\n                    onChange={handleSelection}\n                />\n            }\n        </div>\n    );\n}\n\nexport default FilterDate;","import { useEffect, useState } from \"react\";\n\nfunction NumberRangeSelector({ minValue, maxValue, updateRange }) {\n    const [valueFrom, setValueFrom] = useState(minValue || 0);\n    const [valueTo, setValueTo] = useState(maxValue || 0);\n\n    const handleValueFromChange = event => {\n        setValueFrom(event.target.value);\n    };\n\n    const handleValueToChange = event => {\n        setValueTo(event.target.value);\n    };\n\n    useEffect(() => {\n        updateRange({\n            \"minValue\": valueFrom,\n            \"maxValue\": valueTo,\n        });\n    }, [valueFrom, valueTo, updateRange]);\n\n    return (\n        <div className=\"numberRangeSelector\">\n            <label htmlFor=\"from\">From</label>\n            <input type=\"number\" value={valueFrom} onChange={handleValueFromChange} />\n            <label htmlFor=\"to\">to</label>\n            <input type=\"number\" value={valueTo} onChange={handleValueToChange} />\n        </div>\n    );\n};\n\nexport default NumberRangeSelector;","import { useCallback, useState } from \"react\";\nimport NumberRangeSelector from \"./NumberRangeSelector\";\n\nfunction FilterNumber({ columnId, updateFilterValue }) {\n    const [showSelector, setShowSelector] = useState(false);\n    const [minAmount, setMinAmount] = useState();\n    const [maxAmount, setMaxAmount] = useState();\n\n    const getNumberRangeText = useCallback(() => {\n        let text;\n        if (!minAmount && !maxAmount) {\n            text = 'is not selected';\n        } else if (minAmount && !maxAmount) {\n            text = `from ${minAmount}`;\n        } else if (!minAmount && maxAmount) {\n            text = `up to ${maxAmount}`;\n        } else {\n            text = `from ${minAmount} to ${maxAmount}`;\n        }\n\n        return `Amount range ${text} (clickable)`;\n    }, [minAmount, maxAmount]);\n\n    const toggleSelector = () => {\n        setShowSelector(!showSelector);\n    };\n\n    const updateRange = range => {\n        setMinAmount(range.minValue);\n        setMaxAmount(range.maxValue);\n    };\n\n    return (\n        <div className=\"filter filterNumber\">\n            <span className=\"numberRange\" onClick={toggleSelector}>{getNumberRangeText()}</span>\n            {showSelector &&\n                <NumberRangeSelector\n                    minValue={minAmount}\n                    maxValue={maxAmount}\n                    updateRange={updateRange}\n                />\n            }\n        </div>\n    );\n}\n\nexport default FilterNumber;","import FilterSelect from \"./FilterSelect\";\nimport { columns } from '../../config.json';\nimport { prepareFilterOptions } from \"./utils\";\nimport MD5 from \"crypto-js/md5\";\nimport FilterText from \"./FilterText\";\nimport FilterDate from \"./FilterDate\";\nimport FilterNumber from \"./FilterNumber\";\n\nfunction FilterContainer() {\n\n    const getFilter = columnId => {\n        const columnParams = columns[columnId];\n        switch (columnParams.filterType) {\n            case 'select':\n                const options = prepareFilterOptions(columnParams.options);\n                return <FilterSelect\n                    columnId={columnId}\n                    options={options}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />\n            case 'text':\n                return <FilterText\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            case 'date':\n                return <FilterDate\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            case 'number':\n                return <FilterNumber\n                    columnId={columnId}\n                    updateFilterValue={updateFilterValue}\n                    key={MD5(columnId)}\n                />;\n            default:\n                return <></>;\n        }\n    };\n\n    const updateFilterValue = newValue => {\n\n    };\n\n    return (\n        <div className=\"filterContainer\">\n            {Object.keys(columns).map(columnId => getFilter(columnId))}\n        </div>\n    );\n}\n\nexport default FilterContainer;","const prepareFilterOptions = items => {\n    return items.map(item => {\n        return {\n            'value': item.replace(' ', '').toLowerCase(),\n            'label': item\n        };\n    });\n};\n\nexport {\n    prepareFilterOptions\n};","import { useEffect, useState } from 'react';\nimport Table from '../Table';\nimport Paginator from '../Paginator';\nimport config from '../../config.json';\n// `documents` structure has changed by adding a separate `meta` block with total records quantity. Having this block we avoid fetching all data in order to show correct pages quantity.\nimport { documents, meta } from '../../data/documents.json';\nimport FilterContainer from '../FilterContainer';\n\nfunction MainContainer() {\n    const [pageSize, setPageSize] = useState(0);\n    const [invoices, setInvoices] = useState([]);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [pagesQuantity, setPagesQuantity] = useState(0);\n\n    useEffect(() => {\n        setPageSize(config.defaults.pageSize);\n    }, []);\n\n    useEffect(() => {\n        const fetchedInvoices = getInvoices(documents, pageSize, pageNumber);\n        setInvoices(fetchedInvoices.documents);\n        setPagesQuantity(calculatePagesQuantity(pageSize, fetchedInvoices.quantity));\n    }, [pageSize, pageNumber]);\n\n    const getInvoices = (documentsList, size, currentPageNumber) => {\n        return {\n            'documents': documentsList.slice((currentPageNumber - 1) * size, currentPageNumber * size),\n            'quantity': meta.quantity\n        };\n    };\n\n    const calculatePagesQuantity = (size, total) => {\n        return Math.ceil(total / size);\n    };\n\n    const updatePageNumber = newValue => {\n        setPageNumber(newValue);\n    };\n\n    return (\n        <div className=\"main-container\">\n            <h1>Invoices</h1>\n            <FilterContainer />\n            <Table invoices={invoices} />\n            <Paginator currentPage={pageNumber} quantity={pagesQuantity} updatePageNumber={updatePageNumber} />\n        </div>\n    );\n}\n\nexport default MainContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainContainer from './components/MainContainer';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainContainer />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}