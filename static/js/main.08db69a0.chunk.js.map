{"version":3,"sources":["components/TableHeader/index.jsx","components/TableDataCell/index.jsx","components/TableDataRow/index.jsx","components/Table/index.jsx","components/Paginator/index.jsx","components/MainContainer/index.jsx","index.js"],"names":["TableHeader","columns","className","Object","keys","map","columnKey","MD5","join","toString","TableDataCell","value","TableDataRow","invoice","keySalt","Table","invoices","values","Paginator","currentPage","quantity","updatePageNumber","useState","inputValue","setInputValue","applyNewValue","newValue","sanitizeInputValue","replace","handlePageChange","pageNumber","onClick","hidden","type","name","onInput","event","target","onKeyPress","charCode","MainContainer","pageSize","setPageSize","setInvoices","setPageNumber","pagesQuantity","setPagesQuantity","useEffect","config","defaults","fetchedInvoices","getInvoices","documents","calculatePagesQuantity","documentsList","size","currentPageNumber","slice","meta","total","Math","ceil","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08db69a0.chunk.js","sourcesContent":["import MD5 from 'crypto-js/md5';\n\nfunction TableHeader({ columns }) {\n    return (\n        <thead>\n            <tr className=\"table-header\">\n                {Object.keys(columns).map(columnKey => {\n                    return (\n                        <th className=\"table-header-cell\"\n                            key={MD5([columnKey, columns[columnKey]].join('|')).toString()}\n                        >\n                            {columns[columnKey]}\n                        </th>\n                    );\n                })}\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;","const TableDataCell = ({ value }) => <td className=\"table-cell\">{value}</td>;\n\nexport default TableDataCell;","import MD5 from 'crypto-js/md5';\nimport TableDataCell from '../TableDataCell';\nimport { columns } from '../../config.json';\n\nconst TableDataRow = function ({ invoice, keySalt }) {\n    return (\n        <tr className=\"table-row\">\n            {Object.keys(columns).map(columnKey => {\n                const value = invoice[columnKey];\n                return <TableDataCell\n                    value={value}\n                    key={MD5([keySalt, value, columnKey].join('|')).toString()}\n                />;\n            })}\n        </tr>\n    );\n}\n\nexport default TableDataRow;","import MD5 from 'crypto-js/md5';\n\nimport TableHeader from '../TableHeader';\nimport TableDataRow from '../TableDataRow';\nimport { columns } from '../../config.json';\n\nfunction Table({ invoices }) {\n    return (\n        <table>\n            <TableHeader\n                columns={columns}\n                key={MD5(Object.keys(columns).join('|')).toString()}\n            />\n            <tbody>\n                {invoices.map(invoice => {\n                    return <TableDataRow\n                        invoice={invoice}\n                        key={MD5(Object.values(invoice).join('|')).toString()}\n                        keySalt={MD5(Object.values(invoice).join('|')).toString()}\n                    />;\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;","import { useState } from \"react\";\n\nfunction Paginator({ currentPage, quantity, updatePageNumber }) {\n    const [inputValue, setInputValue] = useState(currentPage);\n\n    const handleInput = event => {\n        applyNewValue(event.target.value);\n    };\n\n    const handleKeyPress = event => {\n        if (event.charCode === 13 && inputValue) {\n            updatePageNumber(inputValue);\n        }\n    };\n\n    const applyNewValue = newValue => {\n        newValue === ''\n            ? setInputValue(newValue)\n            : setInputValue(sanitizeInputValue(newValue));\n    };\n\n    const sanitizeInputValue = value => {\n        if (typeof value === 'string') {\n            value = value.replace(/\\D/, '');\n        }\n        if (value < 1) {\n            value = 1;\n        } else if (value > quantity) {\n            value = quantity;\n        }\n        return value;\n    }\n\n    const handlePrev = () => {\n        const prevPage = inputValue - 1;\n        handlePageChange(prevPage);\n    };\n\n    const handleNext = () => {\n        const nextPage = inputValue + 1;\n        handlePageChange(nextPage);\n    };\n\n    const handlePageChange = pageNumber => {\n        applyNewValue(pageNumber);\n        updatePageNumber(sanitizeInputValue(pageNumber));\n    };\n\n    return (\n        <div>\n            <button\n                className=\"prevPage\" \n                onClick={handlePrev} \n                hidden={currentPage === 1}\n            >Prev</button>\n            <input\n                type=\"text\"\n                name=\"currentPage\"\n                value={inputValue}\n                onInput={handleInput}\n                onKeyPress={handleKeyPress}\n            />\n            <span className=\"pagesQuantity\">{`out of ${quantity}`}</span>\n            <button\n                className=\"nextPage\" \n                onClick={handleNext}\n                hidden={currentPage === quantity}\n            >Next</button>\n        </div>\n    );\n};\n\nexport default Paginator;","import { useEffect, useState } from 'react';\nimport Table from '../Table';\nimport Paginator from '../Paginator';\nimport config from '../../config.json';\n// `documents` structure has changed by adding a separate `meta` block with total records quantity. Having this block we avoid fetching all data in order to show correct pages quantity.\nimport { documents, meta } from '../../data/documents.json';\n\nfunction MainContainer() {\n    const [pageSize, setPageSize] = useState(0);\n    const [invoices, setInvoices] = useState([]);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [pagesQuantity, setPagesQuantity] = useState(0);\n\n    useEffect(() => {\n        setPageSize(config.defaults.pageSize);\n    }, []);\n\n    useEffect(() => {\n        const fetchedInvoices = getInvoices(documents, pageSize, pageNumber);\n        setInvoices(fetchedInvoices.documents);\n        setPagesQuantity(calculatePagesQuantity(pageSize, fetchedInvoices.quantity));\n    }, [pageSize, pageNumber]);\n\n    const getInvoices = (documentsList, size, currentPageNumber) => {\n        return {\n            'documents': documentsList.slice((currentPageNumber - 1) * size, currentPageNumber * size),\n            'quantity': meta.quantity\n        };\n    };\n\n    const calculatePagesQuantity = (size, total) => {\n        return Math.ceil(total / size);\n    };\n\n    const updatePageNumber = newValue => {\n        setPageNumber(newValue);\n    };\n\n    return (\n        <div className=\"main-container\">\n            <h1>Invoices</h1>\n            <Table invoices={invoices} />\n            <Paginator currentPage={pageNumber} quantity={pagesQuantity} updatePageNumber={updatePageNumber} />\n        </div>\n    );\n}\n\nexport default MainContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainContainer from './components/MainContainer';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MainContainer />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}